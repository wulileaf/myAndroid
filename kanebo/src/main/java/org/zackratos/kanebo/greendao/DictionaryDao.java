package org.zackratos.kanebo.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "T_Sys_Dictionary".
*/
public class DictionaryDao extends AbstractDao<Dictionary, Long> {

    public static final String TABLENAME = "T_Sys_Dictionary";

    /**
     * Properties of entity Dictionary.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ServerId = new Property(1, String.class, "ServerId", false, "SERVER_ID");
        public final static Property DictId = new Property(2, String.class, "DictId", false, "DICT_ID");
        public final static Property DictType = new Property(3, String.class, "DictType", false, "DICT_TYPE");
        public final static Property DictClass = new Property(4, String.class, "DictClass", false, "DICT_CLASS");
        public final static Property DictName = new Property(5, String.class, "DictName", false, "DICT_NAME");
        public final static Property IsDel = new Property(6, String.class, "IsDel", false, "IS_DEL");
        public final static Property Remark = new Property(7, String.class, "Remark", false, "REMARK");
        public final static Property IsLock = new Property(8, String.class, "IsLock", false, "IS_LOCK");
        public final static Property DictValue = new Property(9, String.class, "DictValue", false, "DICT_VALUE");
        public final static Property ClientType = new Property(10, String.class, "ClientType", false, "CLIENT_TYPE");
        public final static Property FirstLevel = new Property(11, String.class, "FirstLevel", false, "FIRST_LEVEL");
        public final static Property INT1 = new Property(12, String.class, "INT1", false, "INT1");
    }


    public DictionaryDao(DaoConfig config) {
        super(config);
    }
    
    public DictionaryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"T_Sys_Dictionary\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SERVER_ID\" TEXT," + // 1: ServerId
                "\"DICT_ID\" TEXT," + // 2: DictId
                "\"DICT_TYPE\" TEXT," + // 3: DictType
                "\"DICT_CLASS\" TEXT," + // 4: DictClass
                "\"DICT_NAME\" TEXT," + // 5: DictName
                "\"IS_DEL\" TEXT," + // 6: IsDel
                "\"REMARK\" TEXT," + // 7: Remark
                "\"IS_LOCK\" TEXT," + // 8: IsLock
                "\"DICT_VALUE\" TEXT," + // 9: DictValue
                "\"CLIENT_TYPE\" TEXT," + // 10: ClientType
                "\"FIRST_LEVEL\" TEXT," + // 11: FirstLevel
                "\"INT1\" TEXT);"); // 12: INT1
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"T_Sys_Dictionary\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Dictionary entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ServerId = entity.getServerId();
        if (ServerId != null) {
            stmt.bindString(2, ServerId);
        }
 
        String DictId = entity.getDictId();
        if (DictId != null) {
            stmt.bindString(3, DictId);
        }
 
        String DictType = entity.getDictType();
        if (DictType != null) {
            stmt.bindString(4, DictType);
        }
 
        String DictClass = entity.getDictClass();
        if (DictClass != null) {
            stmt.bindString(5, DictClass);
        }
 
        String DictName = entity.getDictName();
        if (DictName != null) {
            stmt.bindString(6, DictName);
        }
 
        String IsDel = entity.getIsDel();
        if (IsDel != null) {
            stmt.bindString(7, IsDel);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(8, Remark);
        }
 
        String IsLock = entity.getIsLock();
        if (IsLock != null) {
            stmt.bindString(9, IsLock);
        }
 
        String DictValue = entity.getDictValue();
        if (DictValue != null) {
            stmt.bindString(10, DictValue);
        }
 
        String ClientType = entity.getClientType();
        if (ClientType != null) {
            stmt.bindString(11, ClientType);
        }
 
        String FirstLevel = entity.getFirstLevel();
        if (FirstLevel != null) {
            stmt.bindString(12, FirstLevel);
        }
 
        String INT1 = entity.getINT1();
        if (INT1 != null) {
            stmt.bindString(13, INT1);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Dictionary entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ServerId = entity.getServerId();
        if (ServerId != null) {
            stmt.bindString(2, ServerId);
        }
 
        String DictId = entity.getDictId();
        if (DictId != null) {
            stmt.bindString(3, DictId);
        }
 
        String DictType = entity.getDictType();
        if (DictType != null) {
            stmt.bindString(4, DictType);
        }
 
        String DictClass = entity.getDictClass();
        if (DictClass != null) {
            stmt.bindString(5, DictClass);
        }
 
        String DictName = entity.getDictName();
        if (DictName != null) {
            stmt.bindString(6, DictName);
        }
 
        String IsDel = entity.getIsDel();
        if (IsDel != null) {
            stmt.bindString(7, IsDel);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(8, Remark);
        }
 
        String IsLock = entity.getIsLock();
        if (IsLock != null) {
            stmt.bindString(9, IsLock);
        }
 
        String DictValue = entity.getDictValue();
        if (DictValue != null) {
            stmt.bindString(10, DictValue);
        }
 
        String ClientType = entity.getClientType();
        if (ClientType != null) {
            stmt.bindString(11, ClientType);
        }
 
        String FirstLevel = entity.getFirstLevel();
        if (FirstLevel != null) {
            stmt.bindString(12, FirstLevel);
        }
 
        String INT1 = entity.getINT1();
        if (INT1 != null) {
            stmt.bindString(13, INT1);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Dictionary readEntity(Cursor cursor, int offset) {
        Dictionary entity = new Dictionary( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ServerId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DictId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // DictType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // DictClass
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // DictName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // IsDel
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Remark
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // IsLock
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // DictValue
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ClientType
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // FirstLevel
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // INT1
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Dictionary entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServerId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDictId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDictType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDictClass(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDictName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsDel(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsLock(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDictValue(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setClientType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFirstLevel(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setINT1(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Dictionary entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Dictionary entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Dictionary entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
